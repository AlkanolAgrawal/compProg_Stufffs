{
  "C++ Competitive Programming Template": {
    "prefix": "cpp-template",
    "description": "A C++ template for competitive programming with helper functions and pb_ds.",
    "body": [
      "/*",
      " █████╗ ██╗     ██╗  ██╗ █████╗ ███╗   ██╗ ██████╗ ██╗",
      "██╔══██╗██║     ██║ ██╔╝██╔══██╗████╗  ██║██╔═══██╗██║",
      "███████║██║     █████╔╝ ███████║██╔██╗ ██║██║   ██║██║",
      "██╔══██║██║     ██╔═██╗ ██╔══██║██║╚██╗██║██║   ██║██║",
      "██║  ██║███████╗██║  ██╗██║  ██║██║ ╚████║╚██████╔╝███████╗",
      "╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝ ╚═════╝ ╚══════╝",
      "*/",
      "// standard libraries",
      "#include <bits/stdc++.h>",
      "#include <ext/pb_ds/assoc_container.hpp>",
      "#include <ext/pb_ds/tree_policy.hpp>",
      "",
      "// directives-> brings all the names from specified namespace to current scope",
      "using namespace std;",
      "using namespace __gnu_pbds;",
      "",
      "// standard_templates",
      "template <typename T>",
      "using ordered_set = tree<",
      "    T,",
      "    null_type,",
      "    less<T>,",
      "    rb_tree_tag,",
      "    tree_order_statistics_node_update>;",
      "template <typename K, typename V>",
      "using ordered_map = tree<",
      "    K,",
      "    V,",
      "    less<K>,",
      "    rb_tree_tag,",
      "    tree_order_statistics_node_update>;",
      "",
      "// ====================== UNIVERSAL MAX FUNCTION ======================",
      "template <typename Iterable>",
      "auto max(Iterable &container) -> decltype(*container.begin())",
      "{",
      "    using T = decltype(*container.begin());",
      "    T ans = *container.begin();",
      "    for (auto &elem : container)",
      "        ans = std::max(ans, elem);",
      "    return ans;",
      "}",
      "",
      "template <typename Iterable>",
      "auto min(Iterable &container) -> decltype(*container.begin())",
      "{",
      "    using T = decltype(*container.begin());",
      "    T ans = *container.begin();",
      "    for (auto &elem : container)",
      "        ans = std::min(ans, elem);",
      "    return ans;",
      "}",
      "",
      "// ====================== UNIVERSAL PRINT FUNCTION ======================",
      "// primitives",
      "template <typename T>",
      "typename enable_if<!is_class<T>::value>::type",
      "print(const T x)",
      "{",
      "    cout << x;",
      "}",
      "// pairs",
      "template <typename T1, typename T2>",
      "void print(const pair<T1, T2> &p)",
      "{",
      "    cout << \"(\" << p.first << \", \" << p.second << \")\";",
      "}",
      "// sequences",
      "template <typename Container>",
      "auto print(const Container &container) -> decltype(container.begin(), void())",
      "{",
      "    bool first = true;",
      "    for (auto &elem : container)",
      "    {",
      "        if (!first)",
      "            cout << \" \";",
      "        print(elem);",
      "        first = false;",
      "    }",
      "    cout << \"\\n\";",
      "}",
      "// power",
      "template <typename T>",
      "T power(T base, int exp)",
      "{",
      "    T res = 1;",
      "    for (; exp; exp >>= 1, base *= base)",
      "        if (exp & 1)",
      "            res *= base;",
      "    return res;",
      "}",
      "",
      "// debugging stuff",
      "#ifndef ONLINE_JUDGE",
      "#define debug(x) cerr << #x << \" = \" << (x) << endl;",
      "#else",
      "#define debug(x)",
      "#endif",
      "",
      "// easing initialisation",
      "#define vll vector<ll>",
      "#define pll pair<ll, ll>",
      "#define vpll vector<pair<ll, ll>>",
      "#define sll set<ll>",
      "#define vs vector<string>",
      "#define pq priority_queue",
      "#define elif else if",
      "",
      "// easing technicalities",
      "#define yes cout << \"YES\\n\";",
      "#define no cout << \"NO\\n\";",
      "#define all(x) x.begin(), x.end()",
      "#define rall(x) x.rbegin(), x.rend()",
      "#define sum(v) accumulate(all(v), 0LL)",
      "#define clz(x) __builtin_clzll(x)",
      "#define ctz(x) __builtin_ctzll(x)",
      "#define cnt_setbits(x) __builtin_popcountll(x)",
      "",
      "// short_hands",
      "#define int long long",
      "#define ll long long",
      "#define ff first",
      "#define ss second",
      "#define lb lower_bound",
      "#define ub upper_bound",
      "#define pb push_back",
      "#define popb pop_back",
      "#define dub double",
      "",
      "// repetitions",
      "#define rep(i, s, e) for (auto i = s; i < e; i++)",
      "#define reprev(i, s, e) for (auto i = s; i >= e; i--)",
      "",
      "// solving_functions",
      "void solve();",
      "// fastio",
      "void alkanol()",
      "{",
      "    ios_base::sync_with_stdio(false);",
      "    cin.tie(NULL);",
      "    cout.tie(NULL);",
      "}",
      "// Entry-Point",
      "signed main()",
      "{",
      "    alkanol();",
      "    int t;",
      "    cin >> t;",
      "    while (t--)",
      "    {",
      "        solve();",
      "    }",
      "    return 0;",
      "}",
      "",
      "// Taking it On!!",
      "void solve()",
      "{",
      "    int n, k;",
      "    cin >> n >> k;",
      "    vll v(n);",
      "    rep(i, 0, n) cin >> v[i];",
      "    print(v);",
      "    $0",
      "}"
    ]
  }
}